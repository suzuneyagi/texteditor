package edu.grinnell.csc207.texteditor;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayNameGenerator.Simple;

import net.jqwik.api.ForAll;
import net.jqwik.api.Property;

public class GapBufferTests {
    @Test
    public void simpleTest(){
        GapBuffer buffer = new GapBuffer();
        buffer.insert('H');
        buffer.insert('e');
        buffer.insert('l');
        buffer.insert('l');
        buffer.insert('o');
        buffer.insert(' ');
        buffer.insert('W');
        buffer.insert('o');
        buffer.insert('r');
        buffer.insert('l');
        buffer.insert('d');
        buffer.insert('!');
        assertEquals('l', buffer.getChar(2));
        assertEquals("Hello World!", buffer.toString());
        assertEquals(12, buffer.getSize());
        assertEquals(12, buffer.getCursorPosition());
        assertThrows(IndexOutOfBoundsException.class, () -> {
            buffer.getChar(30);
        });
    }

    /**
     * Test if moving cursor within the bounds works correctly.
     */
    @Test
    public void cursorTest(){
        GapBuffer buffer = new GapBuffer();
        buffer.insert('H');
        buffer.insert('e');
        buffer.insert('l');
        buffer.insert('l');
        buffer.insert('o');
        buffer.insert(' ');
        buffer.insert('W');
        buffer.insert('o');
        buffer.insert('r');
        buffer.insert('l');
        buffer.insert('d');
        buffer.insert('!');

        buffer.moveLeft();
        buffer.moveLeft();
        buffer.moveLeft();
        assertEquals(9, buffer.getCursorPosition());
        assertEquals("Hello World!", buffer.toString());
        buffer.delete();
        buffer.delete();
        buffer.delete();
        assertEquals("Hello ld!", buffer.toString());
        assertEquals(9, buffer.getSize());
        buffer.insert('A');
        buffer.insert('B');
        buffer.insert('C');
        assertEquals("Hello ABCld!", buffer.toString());
        buffer.moveRight();
        buffer.moveRight();
        assertEquals(11, buffer.getCursorPosition());
    }

    @Test
    public void cursorCornerCases(){
        GapBuffer buffer = new GapBuffer();
        buffer.insert('H');
        buffer.insert('e');
        buffer.insert('l');
        buffer.insert('l');
        buffer.insert('o');
        buffer.moveRight();
        assertEquals(5, buffer.getCursorPosition());
        buffer.moveLeft();
        buffer.moveLeft();
        buffer.moveLeft();
        buffer.moveLeft();
        buffer.moveLeft();
        buffer.moveLeft();
        assertEquals(0, buffer.getCursorPosition());
    }

    /**
     * Test if moving cursor out of bounds is not possible and the cursor position stops at the edge of the buffer
     */
    @Test
    public void emptyStringTest(){
        GapBuffer buffer = new GapBuffer();
        assertEquals(0, buffer.getSize());
        assertEquals(0, buffer.getCursorPosition());
        buffer.delete();
        assertEquals(0, buffer.getSize());
        buffer.moveRight();
        assertEquals(0, buffer.getCursorPosition());
        buffer.moveLeft();
        assertEquals(0, buffer.getCursorPosition());
        assertThrows(IndexOutOfBoundsException.class, () -> {
            buffer.getChar(0);
        });
    }

    @Test
    public void additionalCornerCases(){
        GapBuffer buffer = new GapBuffer();
        buffer.insert('H');
        assertEquals(1, buffer.getSize());
        assertEquals(1, buffer.getCursorPosition());
        buffer.insert('e');
        assertEquals(2, buffer.getSize());
        assertEquals(2, buffer.getCursorPosition());
    }

    /**
     * Checks that any character can be inserted into the buffer and it always increases the size of the buffer by 1
     * @param ch a random character generated by @ForAll
     */
    @Property
    public void anyCharInsert (@ForAll char ch){
        GapBuffer buffer = new GapBuffer();
        int sizeBefore = buffer.getSize();
        buffer.insert(ch);
        int sizeAfter = buffer.getSize();
        assertEquals(sizeBefore + 1, sizeAfter);
    }
}
